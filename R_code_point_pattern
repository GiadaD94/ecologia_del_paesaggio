#codice per analizzare i pattern legati ai punti

install.packages("ggplot2")
install.packages("spatstat")

#allego library

library(ggplot2)
library(spatstat)


#setwd("~:/lab/") per windows
setwd("C/lab")

#importare dati
covid <- read.table("covid_agg.csv", head=T)
head(covid)

plot(covid$country,covid$cases) 

attach(covid) 

plot(country,cases)

# modifica delle etichette, funzione las = valore numerico che indica l'orientamento delle etichette o altro testo aggiunto al plot
# parallele all'asse ( 0), orizzontale (1), perpendicolare all'asse (2), verticale (3)
#parallel labels
plot(covid$country,covid$cases,las=0)
#horizontal labels
plot(covid$country,covid$cases,las=1)
#perpendicular labels
plot(covid$country,covid$cases,las=2)
#vertical labels
plot(covid$country,covid$cases,las=3)

# cex.axis = ingrandimento dell'annotazione degli assi rispetto al cex
# cex.lab = ingrandimento delle etichette x e y rispetto al cex
plot(covid$country,covid$cases,las=3,cex.lab=0.5, cex.axis=0.5)


#ggplot2
data(mpg)
head(mpg)

#inserimento dati, funzione aes= funzione di quotazione, i suoi input sono quotati per essere valutati nel contesto dei dati. 
è possibile denominare direttamente le variabili del dataframe
# tipo di geometria (a punti, linee, poligoni)
ggplot(mpg,aes(x=displ,y=hwy)) + geom_point()
ggplot(mpg,aes(x=displ,y=hwy)) + geom_line()
ggplot(mpg,aes(x=displ,y=hwy)) + geom_polygon()

#ggplot di covid, funzione size= restituisce un vettore numerico di lunghezza (x) ????????
ggplot(covid,aes(x=lon,y=lat,size=cases)) + geom_point()
ggplot(covid,aes(x=lon,y=lat,size=cases)) + geom_polygon()

#density -> esprime la stima della densità di kernel
#creare dataset for spatstat, utilizzare funzioni ppp per creare a spatial point pattern, c sta per colonna
attach(covid)
covids <- ppp(lon, lat, c(-180,180), c(-90,90))

d <- density(covids)

plot(d)
points(covids)

#save the .RData, salvando area di lavoro nella cartella lab con il nome point_pattern.RData

setwd("C:/lab") 

load("point_pattern.RData")

#ls = è una funzione in R che elenca tutti gli oggetti nell'ambiente di lavoro
ls()

plot(d)

#modificare palette grafico
cl <- colorRampPalette(c("yellow","orange","red")) (100)
plot(d, col=cl)

#plot della mappa della densità dal blu al verde
cl <- colorRampPalette(c("blue","green")) (100)
cl <- colorRampPalette(c("blue","light blue","light green","green")) (100)
plot(d, col=cl)

install.packages("rgdal")
library(rgdal)

coastlines <- readOGR("ne_10m_coastline.shp")   
#plot coastlines e funzione add = ???????
plot(coastlines, add=T)

#plot della mappa di densità con modifiche di palette e aggiunta di coastlines
cl <- colorRampPalette(c("blue","light blue","light green","yellow")) (100)
plot(d, col=cl)
plot(coastlines, add=T, col="yellow")

cl2 <- colorRampPalette(c("red","orange","yellow","green", "blue")) (800)
plot(d, col=cl2)
plot(coastlines, add=T)

cl3 <- colorRampPalette(c("green", "violet", "blue")) (200)
plot(d, col=cl3)
plot(coastlines, add=T)

cl4 <- colorRampPalette(c("violet","yellow","green"))(100)
plot(d, col=cl4)
plot(coastlines, add=T)

cl5 <- colorRampPalette(c("darkcyan", "purple", "red")) (200) 
plot(d, col=cl5)
plot(coastlines, add=T)

cl6 <- colorRampPalette(c("darkcyan", "purple", "red")) (200) 
plot(d, col=cl6)
plot(coastlines, add=T)

cl7<-colorRampPalette(c("white","blue","green","red","orange","yellow")) (150)
plot(d, col=cl7)
plot(coastlines, add=T)


